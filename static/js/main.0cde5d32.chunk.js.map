{"version":3,"sources":["components/elements/Navbar/styles.js","components/elements/Navbar/index.jsx","components/lib/WeatherWidget/styles.js","helpers/weatherIconUrl.js","components/lib/WeatherWidget/index.jsx","components/lib/CitySearch/styles.js","components/lib/CitySearch/constants.js","services/constants.js","services/index.js","constants/city.js","components/lib/CitySearch/index.jsx","helpers/use-debounce.js","components/lib/AddToFavorites/constants.js","components/lib/AddToFavorites/index.js","components/pages/Home/styles.js","helpers/isEmptyObject.js","helpers/flattenCurrentConditions.js","helpers/flattenFiveDaysForecast.js","helpers/favoritesStorage.js","components/lib/ForecastWeather/styles.js","components/lib/ForecastWeather/index.jsx","components/pages/Home/components/FiveDaysForecastWrapper.js","components/pages/Home/index.jsx","components/pages/Favorites/styles.js","components/pages/Favorites/index.jsx","components/pages/NotFound/index.jsx","routes/index.js","routes/constants.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","textAlign","navlink","marginLeft","Navbar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","to","wrapper","display","justifyContent","alignItems","currentWeatherImage","width","height","info","flexDirection","weatherIconUrl","index","indexStr","WeatherWidget","props","city","weatherIcon","weatherText","value","unit","src","alt","component","textField","seachFieldTitle","apikey","getRequestStringDataQuery","queryObj","obj","isParametersExist","parameters","qs","getCityAutocomplete","searchString","a","params","q","axios","get","response","data","error","console","getCurrentConditions","locationKey","getFiveDaysForecast","metric","defaultCity","LocalizedName","Key","CitySearch","React","useState","setSearchString","cityAutocomplete","setCityAutocomplete","isSearching","setIsSearching","debouncedSearchString","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","fetchData","results","filterOptions","createFilterOptions","matchFrom","stringify","option","Autocomplete","options","onChange","e","v","onChoose","loading","getOptionLabel","style","clearOnEscape","autoSelect","renderInput","inputProps","target","TextField","label","fullWidth","FavotiteTooltipTitle","AddToFavorites","isFavorite","onClick","Tooltip","Favorite","FavoriteBorder","container","flexWrap","mainPane","dailyForecastWrapper","isEmptyObject","Object","entries","length","constructor","flattentCurrentConditions","cc","result","WeatherIcon","WeatherText","Temperature","Metric","Value","Unit","TempValue","flattenFiveDaysForecast","fiveDaysForecast","map","date","Date","Minimum","dValue","dUnit","Maximum","nValue","nUnit","Day","dIcon","Icon","dIconPhrase","IconPhrase","Night","nIcon","nIconPhrase","favoritesStr","localStorage","getItem","JSON","parse","add","parsedFavoriteCities","filter","c","setItem","remove","el","margin","padding","halfDayBlock","ForecastWeather","forecast","Card","moment","format","getWeekDay","FiveDaysForecastWrapper","dayForecast","key","Home","favorite","setIsFavorite","setCity","flattenedDefaultCurrentConditions","flattenCurrentConditions","StabCurrentConditions","currentConditions","setCurrentConditions","setFiveDaysForecast","cityChooseHandler","cityObject","NewCurrentConditions","flattenedCurrentConditions","NewFiveDaysForecast","hasOwnProperty","log","flattenedFiveDaysForecast","DailyForecasts","Paper","elevation","Grid","direction","justify","item","xs","favoritesStorage","favoriteClickHandler","marginTop","paddingTop","citiesWeatherWrapper","Favorites","favoriteWeaterData","setFavoriteWeaterData","fillFavoriteCitiesWithCurrentWeather","cityData","flattenedCityData","name","MainRoutes","exact","path","NotFound","App","basename","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0cde5d32.chunk.js","sourcesContent":["import {createStyles, makeStyles} from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n      textAlign: \"left\",\n    },\n    navlink: {\n      marginLeft: \"1rem\",\n    },\n  })\n);\n","import React from \"react\";\n\nimport {AppBar, Toolbar, Typography, IconButton} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\nimport BeachAccessIcon from \"@material-ui/icons/BeachAccess\";\nimport {useStyles} from \"./styles\";\n\nexport default function Navbar() {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <BeachAccessIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Is It Raining\n          </Typography>\n          <Link to=\"/\" className={classes.navlink}>\n            Home\n          </Link>\n          <Link to=\"/favorites\" className={classes.navlink}>\n            Favorites\n          </Link>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import {createStyles, makeStyles} from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme) =>\n  createStyles({\n    wrapper: {\n      display: \"flex\",\n      justifyContent: \"flex-start\",\n      alignItems: \"center\",\n    },\n    currentWeatherImage: {\n      width: \"30px\",\n      height: \"30px\",\n      marginLeft: \"\",\n    },\n    info: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"flex-start\",\n    },\n  })\n);\n","export default function weatherIconUrl(index) {\n  const indexStr = index < 10 ? `0${index}` : `${index}`;\n  return `https://developer.accuweather.com/sites/default/files/${indexStr}-s.png`;\n}\n","import React from \"react\";\nimport {useStyles} from \"./styles\";\nimport {Typography} from \"@material-ui/core\";\nimport weatherIconUrl from \"helpers/weatherIconUrl\";\n\nexport default function WeatherWidget(props) {\n  const classes = useStyles();\n  //TODO: use [Metric/Imperial] to switch between wanted measurement system\n  const {city, weatherIcon, weatherText, value, unit} = props;\n  if (!city || !weatherIcon || !weatherText || !value || !unit) {\n    return null;\n  }\n  return (\n    <div className={classes.wrapper}>\n      <img src={weatherIconUrl(weatherIcon)} alt={weatherText} />\n      <div className={classes.info}>\n        <Typography component=\"span\">{city}</Typography>\n        <Typography component=\"span\">{`${value}${unit}`}</Typography>\n      </div>\n    </div>\n  );\n}\n","import {createStyles, makeStyles} from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme) =>\n  createStyles({\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200,\n    },\n  })\n);\n","export const seachFieldTitle = \"Enter City\";\n","export const apikey = \"mFxnPNWknLwnopsn7p5jtv3R7rHKmn7i\";\n","import axios from \"axios\";\nimport * as qs from \"query-string\";\nimport {apikey} from \"./constants\";\nimport * as cityAutocomplete from \"temp/autocomplete_response.json\";\nimport * as currentConditions from \"temp/current_conditions.json\";\n\nconst isObject = (obj) => {\n  return typeof obj === \"object\" && obj != null;\n};\n\nconst getRequestStringDataQuery = (queryObj) => {\n  const isParametersExist = isObject(queryObj);\n  const parameters = isParametersExist ? queryObj : {};\n\n  if (!isParametersExist) {\n    return \"\";\n  }\n\n  return `?${qs.stringify({...parameters})}`;\n};\n\nexport const getCityAutocomplete = async (searchString) => {\n  const params = getRequestStringDataQuery({apikey, q: searchString});\n  try {\n    const response = await axios.get(\n      `http://dataservice.accuweather.com/locations/v1/cities/autocomplete${params}`,\n      {}\n    );\n    // return cityAutocomplete.default;\n    if (response && response.data) {\n      if (response.data) {\n        return response.data;\n      }\n      if (response.data.error) {\n        const [error] = response.error;\n        return {error};\n      }\n    }\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n  return null;\n};\n\nexport const getCurrentConditions = async (locationKey) => {\n  const params = getRequestStringDataQuery({apikey});\n  try {\n    const response = await axios.get(\n      `http://dataservice.accuweather.com/currentconditions/v1/${locationKey}${params}`,\n      {}\n    );\n    // return currentConditions.default;\n    if (response && response.data) {\n      if (response.data) {\n        return response.data;\n      }\n      if (response.data.error) {\n        const [error] = response.error;\n        return {error};\n      }\n    }\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n  return null;\n};\n\nexport const getFiveDaysForecast = async ({locationKey, metric}) => {\n  const params = getRequestStringDataQuery({apikey, metric});\n  try {\n    const response = await axios.get(\n      `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationKey}${params}`,\n      {}\n    );\n    // return currentConditions.default;\n    if (response && response.data) {\n      if (response.data) {\n        return response.data;\n      }\n      if (response.data.error) {\n        const [error] = response.error;\n        return {error};\n      }\n    }\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n  return null;\n};\n","export const defaultCity = {LocalizedName: \"Tel Aviv\", Key: \"123\"};\n","import React, {useState, useEffect} from \"react\";\nimport {TextField} from \"@material-ui/core\";\nimport {Autocomplete} from \"@material-ui/lab\";\nimport {createFilterOptions} from \"@material-ui/lab/Autocomplete\";\nimport useDebounce from \"helpers/use-debounce\";\nimport {useStyles} from \"./styles\";\nimport {seachFieldTitle} from \"./constants\";\nimport {getCityAutocomplete} from \"services\";\nimport {defaultCity} from \"constants/city\";\n\nfunction CitySearch(props) {\n  const classes = useStyles();\n  const [searchString, setSearchString] = React.useState(\"\");\n  const [cityAutocomplete, setCityAutocomplete] = React.useState([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const debouncedSearchString = useDebounce(searchString, 500);\n\n  useEffect(() => {\n    if (debouncedSearchString) {\n      setIsSearching(true);\n      async function fetchData() {\n        const results = await getCityAutocomplete(debouncedSearchString);\n        setIsSearching(false);\n        results ? setCityAutocomplete(results) : setCityAutocomplete([]);\n      }\n      fetchData();\n    } else {\n      setCityAutocomplete([]);\n    }\n  }, [debouncedSearchString]);\n  const filterOptions = createFilterOptions({\n    matchFrom: \"start\",\n    stringify: (option) => option.LocalizedName,\n  });\n\n  const renderInput = (params) => {\n    const {\n      inputProps: {onChange},\n    } = params;\n    const changeHandler = (e) => {\n      setSearchString(e.target.value);\n      onChange(e);\n    };\n    params.inputProps.onChange = changeHandler;\n    params.inputProps.value = searchString;\n    return <TextField className={classes.textField} {...params} label={seachFieldTitle} variant=\"outlined\" fullWidth />;\n  };\n\n  return (\n    <Autocomplete\n      options={cityAutocomplete}\n      onChange={(e, v) => {\n        const {LocalizedName = defaultCity.LocalizedName, Key = defaultCity.Key} = v ? v : {};\n        props.onChoose({LocalizedName, Key});\n      }}\n      loading={isSearching}\n      getOptionLabel={(option) => option.LocalizedName}\n      style={{width: 300}}\n      clearOnEscape\n      autoSelect\n      filterOptions={filterOptions}\n      renderInput={renderInput}\n    />\n  );\n}\n\nexport default CitySearch;\n","import {useState, useEffect} from \"react\";\n\nexport default function useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","export const FavotiteTooltipTitle = \"Add To Favorites\";\n","import React from \"react\";\nimport {Favorite as FavoriteIcon, FavoriteBorder as FavoriteBorderIcon} from \"@material-ui/icons\";\nimport {Tooltip} from \"@material-ui/core\";\nimport {FavotiteTooltipTitle} from \"./constants\";\nexport default function AddToFavorites(props) {\n  const {isFavorite, onClick} = props;\n  return (\n    <Tooltip title={FavotiteTooltipTitle}>\n      <div onClick={onClick}>{isFavorite ? <FavoriteIcon /> : <FavoriteBorderIcon />}</div>\n    </Tooltip>\n  );\n}\n","import {createStyles, makeStyles} from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"space-around\",\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: \"200px\",\n      height: \"30px\",\n    },\n    mainPane: {\n      width: \"600px\",\n      height: \"400px\",\n    },\n    dailyForecastWrapper: {\n      display: \"flex\",\n      justifyContent: \"space-around\",\n    },\n  })\n);\n","export default function isEmptyObject(obj) {\n  if (!obj) {\n    return true;\n  }\n  return Object.entries(obj).length === 0 && obj.constructor === Object;\n}\n","export default function flattentCurrentConditions(cc) {\n  const result = {};\n  if (!cc) return result;\n  const {\n    WeatherIcon,\n    WeatherText,\n    Temperature: {\n      Metric: {Value, Unit},\n    },\n  } = cc[0];\n  result.WeatherIcon = WeatherIcon;\n  result.WeatherText = WeatherText;\n  result.TempValue = Value;\n  result.Unit = Unit;\n  return result;\n}\n","export default function flattenFiveDaysForecast(fiveDaysForecast) {\n  const dailyForecastFlattened = fiveDaysForecast.map(\n    ({\n      Date: date,\n      Temperature: {\n        Minimum: {Value: dValue, Unit: dUnit},\n        Maximum: {Value: nValue, Unit: nUnit},\n      },\n      Day: {Icon: dIcon, IconPhrase: dIconPhrase},\n      Night: {Icon: nIcon, IconPhrase: nIconPhrase},\n    }) => {\n      return {\n        date,\n        dValue,\n        dUnit,\n        nValue,\n        nUnit,\n        dIcon,\n        dIconPhrase,\n        nIcon,\n        nIconPhrase,\n      };\n    }\n  );\n  return dailyForecastFlattened;\n}\n","const favorites = \"favorites\";\nconst get = () => {\n  const favoritesStr = localStorage.getItem(favorites);\n  const parsedFavorites = favoritesStr ? JSON.parse(favoritesStr) : [];\n  return parsedFavorites;\n};\nconst add = (city) => {\n  const parsedFavoriteCities = get();\n  const presents = parsedFavoriteCities.filter((c) => c.Key === city.Key);\n  if (!presents.length) {\n    localStorage.setItem(favorites, JSON.stringify([...parsedFavoriteCities, city]));\n  }\n};\n\nconst remove = (city) => {\n  const parsedFavoriteCities = get();\n  if (!parsedFavoriteCities.length) return;\n  localStorage.setItem(favorites, JSON.stringify(parsedFavoriteCities.filter((el) => el.Key !== city.Key)));\n};\n\nexport default {get, add, remove};\n","import {createStyles, makeStyles} from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme) =>\n  createStyles({\n    wrapper: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"flex-start\",\n      alignItems: \"center\",\n      position: \"relative\",\n      margin: \"0 5px\",\n      padding: \"3px\",\n    },\n    halfDayBlock: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n  })\n);\n","import React from \"react\";\nimport {useStyles} from \"./styles\";\nimport {Typography, Card} from \"@material-ui/core\";\nimport weatherIconUrl from \"helpers/weatherIconUrl\";\nimport moment from \"moment\";\n\nexport default function ForecastWeather(props) {\n  const classes = useStyles();\n  //TODO: use [Metric/Imperial] to switch between wanted measurement system\n  const {date, dValue, dUnit, nValue, nUnit, dIcon, dIconPhrase, nIcon, nIconPhrase} = props.forecast;\n  const getWeekDay = (date) => {\n    return moment(date).format(\"ddd\");\n  };\n  return (\n    <Card className={classes.wrapper}>\n      <Typography component=\"span\">{getWeekDay(date)}</Typography>\n      <div className={classes.halfDayBlock}>\n        <img src={weatherIconUrl(dIcon)} alt={dIconPhrase} />\n        <Typography component=\"span\" color=\"textSecondary\">\n          {`${nValue}${nUnit}`}\n        </Typography>\n      </div>\n      <div className={classes.halfDayBlock}>\n        <img src={weatherIconUrl(nIcon)} alt={nIconPhrase} />\n        <Typography component=\"span\" color=\"textSecondary\">\n          {`${dValue}${dUnit}`}\n        </Typography>\n      </div>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport ForecastWeather from \"components/lib/ForecastWeather\";\nimport isEmptyObject from \"helpers/isEmptyObject\";\n\nexport default function FiveDaysForecastWrapper(props) {\n  const {fiveDaysForecast} = props;\n  if (isEmptyObject(fiveDaysForecast)) return \"Loading...\";\n  else return fiveDaysForecast.map((dayForecast) => <ForecastWeather key={dayForecast.Date} forecast={dayForecast} />);\n}\n","import React, {useState} from \"react\";\nimport {Paper, Grid, Typography} from \"@material-ui/core\";\nimport WeatherWidget from \"components/lib/WeatherWidget\";\nimport CitySearch from \"components/lib/CitySearch\";\nimport AddToFavorites from \"components/lib/AddToFavorites\";\nimport {useStyles} from \"./styles\";\nimport {defaultCity} from \"constants/city\";\nimport {getCurrentConditions, getFiveDaysForecast} from \"services\";\nimport isEmptyObject from \"helpers/isEmptyObject\";\nimport flattenCurrentConditions from \"helpers/flattenCurrentConditions\";\nimport flattenFiveDaysForecast from \"helpers/flattenFiveDaysForecast\";\nimport favoritesStorage from \"helpers/favoritesStorage\";\nimport * as StabCurrentConditions from \"temp/current_conditions.json\";\nimport * as fiveDaysForecast from \"temp/five_days_forecast.json\";\nimport FiveDaysForecastWrapper from \"./components/FiveDaysForecastWrapper\";\n\nexport default function Home() {\n  const classes = useStyles();\n  const [favorite, setIsFavorite] = useState(false);\n  const [city, setCity] = useState(defaultCity);\n  const flattenedDefaultCurrentConditions = flattenCurrentConditions(StabCurrentConditions.default);\n  const [currentConditions, setCurrentConditions] = useState(flattenedDefaultCurrentConditions);\n  const [fiveDaysForecast, setFiveDaysForecast] = useState({});\n  const [metric, setMetric] = useState(true);\n  const favoriteClickHandler = (city) => {\n    favorite ? favoritesStorage.remove(city) : favoritesStorage.add(city);\n    setIsFavorite(!favorite);\n  };\n  const cityChooseHandler = async (cityObject) => {\n    if (isEmptyObject(cityObject)) {\n      cityObject = defaultCity;\n    }\n    setCity(cityObject);\n    // Get and display current conditions\n    const NewCurrentConditions = await getCurrentConditions(cityObject.Key);\n    // TODO: Think about how to have default Tel Aviv conditions data\n    if (!NewCurrentConditions || !NewCurrentConditions.length) return;\n    const flattenedCurrentConditions = flattenCurrentConditions(NewCurrentConditions);\n    setCurrentConditions(flattenedCurrentConditions);\n    // Get and display 5 days forecast\n    const NewFiveDaysForecast = await getFiveDaysForecast({locationKey: cityObject.Key, metric});\n    if (\n      !NewFiveDaysForecast ||\n      isEmptyObject(NewFiveDaysForecast) ||\n      !NewFiveDaysForecast.hasOwnProperty(\"DailyForecasts\")\n    )\n      return;\n    console.log(\"NewFiveDaysForecast\", NewFiveDaysForecast);\n    const flattenedFiveDaysForecast = flattenFiveDaysForecast(NewFiveDaysForecast.DailyForecasts);\n    setFiveDaysForecast(flattenedFiveDaysForecast);\n  };\n  return (\n    <div className={classes.container}>\n      <CitySearch onChoose={cityChooseHandler} />\n      <Paper className={classes.mainPane} elevation={3}>\n        <Grid container direction=\"column\" justify=\"space-around\" alignItems=\"center\" spacing={7}>\n          <Grid container item xs={12} justify=\"space-around\" alignItems=\"center\">\n            <Grid item xs={3}>\n              <WeatherWidget\n                city={city.LocalizedName}\n                weatherIcon={currentConditions.WeatherIcon}\n                weatherText={currentConditions.WeatherText}\n                value={currentConditions.TempValue}\n                unit={currentConditions.Unit}\n              />\n            </Grid>\n            <Grid item xs={3}>\n              <AddToFavorites onClick={() => favoriteClickHandler(city)} isFavorite={favorite} />\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant=\"h2\">{currentConditions.WeatherText}</Typography>\n          </Grid>\n          <Grid item xs={12} className={classes.dailyForecastWrapper}>\n            <FiveDaysForecastWrapper fiveDaysForecast={fiveDaysForecast} />\n          </Grid>\n        </Grid>\n      </Paper>\n    </div>\n  );\n}\n","import {createStyles, makeStyles} from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"space-around\",\n    },\n    mainPane: {\n      marginTop: \"30px\",\n      width: \"600px\",\n      height: \"400px\",\n      paddingTop: \"30px\",\n    },\n    citiesWeatherWrapper: {\n      display: \"flex\",\n      justifyContent: \"space-around\",\n    },\n  })\n);\n","import React, {useState, useEffect} from \"react\";\nimport {Paper, Grid, Typography} from \"@material-ui/core\";\nimport favoritesStorage from \"helpers/favoritesStorage\";\nimport flattenCurrentConditions from \"helpers/flattenCurrentConditions\";\nimport {getCurrentConditions} from \"services\";\nimport {useStyles} from \"./styles\";\nimport WeatherWidget from \"components/lib/WeatherWidget\";\n\nexport default function Favorites() {\n  const classes = useStyles();\n  const [favoriteWeaterData, setFavoriteWeaterData] = useState([]);\n  useEffect(() => {\n    // const newFavoriteWeatherData = [];\n    setFavoriteWeaterData(favoritesStorage.get().map(async (city) => fillFavoriteCitiesWithCurrentWeather(city)));\n  }, []);\n\n  async function fillFavoriteCitiesWithCurrentWeather(city) {\n    const cityData = await getCurrentConditions(city.Key);\n    const flattenedCityData = flattenCurrentConditions(cityData);\n    console.log(\"{...flattenedCityData, name: city.LocalizedName}\", {...flattenedCityData, name: city.LocalizedName});\n    return {...flattenedCityData, name: city.LocalizedName};\n  }\n\n  return (\n    favoriteWeaterData.length && (\n      <div className={classes.container}>\n        <Paper className={classes.mainPane} elevation={3}>\n          <Grid item xs={12} className={classes.citiesWeatherWrapper}>\n            {favoriteWeaterData.map((city) => (\n              <WeatherWidget\n                city={city.name}\n                weatherIcon={city.WeatherIcon}\n                weatherText={city.WeatherText}\n                value={city.TempValue}\n                unit={city.Unit}\n              />\n            ))}\n          </Grid>\n        </Paper>\n      </div>\n    )\n  );\n}\n","import React from \"react\";\n\nexport default function index() {\n  return <div>Page Not found</div>;\n}\n","import * as React from \"react\";\nimport {Route, Switch} from \"react-router-dom\";\n\nimport {HomePath, FavoritesPath} from \"./constants\";\n\nimport Home from \"components/pages/Home\";\nimport Favorites from \"components/pages/Favorites\";\nimport NotFound from \"components/pages/NotFound\";\n\nconst MainRoutes = () => {\n  return (\n    <Switch>\n      <Route exact path={HomePath} component={Home} />\n      <Route path={FavoritesPath} component={Favorites} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n};\n\nexport default MainRoutes;\n","export const HomePath = \"/\";\nexport const FavoritesPath = \"/favorites\";\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Navbar from \"./components/elements/Navbar\";\n// import {BrowserRouter} from \"react-router-dom\";\nimport {HashRouter} from \"react-router-dom\";\nimport MainRoutes from \"./routes\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter basename='/'>\n        <Navbar />\n        <MainRoutes />\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}